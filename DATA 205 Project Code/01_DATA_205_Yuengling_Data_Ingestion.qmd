---
title: "Capstone Project EDA"
author: "Olivia Yuengling"
format: html
editor: visual
---

## Loading Project Datasets + Packages

```{r}
library(tidyverse)
library(dplyr)
library(ggplot2)

usda_expd <- read_csv("C:/Users/omyue/OneDrive/Desktop/DATA 205/USDA Expenditure Datasets/expd_merged.csv")

usda_fmli <- read_csv("C:/Users/omyue/OneDrive/Desktop/DATA 205/USDA Expenditure Datasets/fmli_merged.csv")

core_inflation <- read_csv("C:/Users/omyue/OneDrive/Desktop/DATA 205/Inflation Datasets/core_inflation_1983-2025.csv")

food_prices <- read_csv("C:/Users/omyue/OneDrive/Desktop/DATA 205/Inflation Datasets/average_prices.csv")

```

# About Each Dataset

## usda_expd

```{r}
head(usda_expd)
```

The original "expd" datasets within the USDA consumer expenditure dataset had more variables, but they were extracted in another piece of code to create this version of the dataset.

### Variables

**NEWID** is a unique identifier for each householder/survey participant

**UCC** is the Universal Classification Code which identifies the type of food product or expenditure.

**COST** is the actual expenditure on that item for that household during that quarter (in US dollars)

**year** is the year of the expenditure

**quarter** is the quarter of the year the expense was recorded

-   1 = January to March

-   2 = April to June

-   3 = July to September

-   4 = October to December

```{r}
summary(usda_expd)
```

## usda_fmli

```{r}
head(usda_fmli)
```

The original "fmli" datasets within the USDA consumer expenditure dataset had more variables, but they were extracted in another piece of code to create this version of the dataset.

### Variables

**NEWID** is a unique identifier for each household/survey participant.

**AGE_REF** is the age of the reference person in the household (typically the primary income earner or householder).

**REGION** is the geographic region code corresponding to:

1 = Northeast 2 = Midwest 3 = South 4 = West

**INCLASS** represents the income class or the houshold income bracket. This is represented as a two-digit code. These codes categorize households into predefined income ranges based on pretax income.

**year** represents the year of the data collection

**quarter** represents the quarter of the year the data was collected.

```{r}
summary(usda_fmli)
```

### Changing the values of "REGION"

I noticed that the REGION data values corresponds with the U.S Census code, so I will be changing the values to a character label instead of numerical (the numbers that represent each region can be found above).

```{r}
usda_fmli <- usda_fmli %>%
  mutate(REGION = case_when(
    REGION == 1 ~ "Northeast",
    REGION == 2 ~ "Midwest",
    REGION == 3 ~ "South",
    REGION == 4 ~ "West",
    TRUE ~ "Other" # Just in case there's a value outside 1-4
  ))
```

## CPI dataset

```{r}
head(core_inflation)
```

Core inflation is calculated through subtracting food and energy prices from the CPI, or the consumer price index. This data will be used in the project to serve as a baseline to compare against food-specific inflation.

For instance if food prices are rising faster in comparison to core inflation it would signal food-specific pressures, such as pressure in supply chains.

```{r}
summary(core_inflation)
```

```{r}
library(scales)

# Convert date column to Date type (just in case it's not)
core_inflation <- core_inflation %>%
  mutate(observation_date = as.Date(observation_date))

# Time series line plot
ggplot(core_inflation, aes(x = observation_date, y = MEDCPIM158SFRBCLE)) +
  geom_line(color = "steelblue", size = 1) +
  labs(
    title = "Core CPI Over Time",
    subtitle = "Monthly data from 1983 to 2025",
    x = "Year",
    y = "Percent Change (YoY)"
  ) +
  scale_x_date(date_breaks = "5 years", date_labels = "%Y") +
  theme_minimal(base_size = 14)
```

```{r}
ggplot(core_inflation, aes(x = MEDCPIM158SFRBCLE)) +
  geom_histogram(bins = 50, fill = "black", alpha = 0.7) +
  labs(title = "Distribution of Core CPI")
```

As seen, the core price index data is skewed to the right which indicates that

For this project I will merge this dataset with the food_prices dataset which will be the next dataset that I will introduce.

## food_prices dataset

```{r}
head(food_prices)
summary(food_prices)
```

### Variables

**series_id** is the code identifying the specific item/location combo (different IDs for different food products)

**year** is the year of the observation

**period** is the month of the observation (e.g, M01 = January)

**value** is the price in (USD) for that item in that month

**item_name** indicates the name of the food item

**area_name** is the title of the geographic area (in this case it is the city average)

```{r}
unique(food_prices$item_name)
```

```{r}
library(dplyr)

food_prices <- food_prices %>%
  mutate(food_category = case_when(
    grepl("flour|rice|spaghetti|macaroni|bread|cookies|crackers", item_name, ignore.case = TRUE) ~ "Grains & Baked Goods",
    grepl("beef|chuck|roast|steak|rib|sirloin", item_name, ignore.case = TRUE) ~ "Beef",
    grepl("pork|bacon|ham|sausage|frankfurters|bologna", item_name, ignore.case = TRUE) ~ "Pork",
    grepl("chicken|turkey", item_name, ignore.case = TRUE) ~ "Poultry",
    grepl("tuna", item_name, ignore.case = TRUE) ~ "Seafood",
    grepl("eggs", item_name, ignore.case = TRUE) ~ "Eggs",
    grepl("milk|cheese|yogurt|butter|margarine", item_name, ignore.case = TRUE) ~ "Dairy",
    grepl("ice cream", item_name, ignore.case = TRUE) ~ "Frozen Desserts",
    grepl("apple|banana|orange|grape|pear|peach|lemon|fruit|strawberry|cherry", item_name, ignore.case = TRUE) ~ "Fruits",
    grepl("potato|lettuce|tomato|cabbage|celery|carrot|onion|pepper|cucumber|broccoli|corn|vegetable|bean", item_name, ignore.case = TRUE) ~ "Vegetables",
    grepl("juice|cola|coffee|soft drinks|beverages|vodka|wine|beer|malt", item_name, ignore.case = TRUE) ~ "Beverages",
    grepl("sugar|peanut butter|shortening", item_name, ignore.case = TRUE) ~ "Pantry Staples",
    grepl("fuel|gasoline|diesel|electricity", item_name, ignore.case = TRUE) ~ "Utilities",
    TRUE ~ "Other"
  ))

food_prices <- food_prices %>%
  filter(year >= 2013, year <= 2023)

food_prices <- food_prices %>%
  filter(!food_category %in% c("Other", "Utilities"))


head(food_prices)

```

After this code snippet I have created a more broad categorical label (**food_category**) including labels such as fruits, grains, and so on.

# Final Cleaning & Data Ingestion

## Merging the CPI and food_prices Dataset

The reason I would like to merge these datasets together is because it would make comparison visualizations for food prices and the median core price index much easier and will save us a lot of trouble along the way.

```{r}
library(lubridate)  

# Convert date to datetime format  
core_inflation <- core_inflation %>%  
  mutate(observation_date = ymd(observation_date))  

# Create 'year' and 'period' columns  
core_inflation <- core_inflation %>%  
  mutate(  
    year = year(observation_date),  
    period = paste0("M", sprintf("%02d", month(observation_date)))  
  ) %>%  
  select(-observation_date) %>%  # Drop original date column  
  filter(year >= 2013, year <= 2023)
```

The purpose of this chunk was to take the variable observation_date and create two new variables "period" and "year" which will be used to join the datasets food_prices and core)inflation in the following chunk.

```{r}
# merges data into one dataset
food_prices <- inner_join(  
  food_prices,  
  core_inflation,  
  by = c("year", "period")  
)  

  
# gives the median CPI variable something more recognizable
food_prices <- food_prices %>%
  rename(med_core_price_index = MEDCPIM158SFRBCLE)

head(food_prices)
```

```{r}
# View first few rows
head(food_prices)

# Check dimensions
dim(food_prices)

# Summary statistics
summary(food_prices)

# Check for missing values
colSums(is.na(food_prices))
```
# More Merging

```{r}
library(stringr)

# Convert month period to numeric, assign quarters, create year_quarter
food_prices <- food_prices %>%
  mutate(
    month = as.numeric(str_remove(period, "M")),
    quarter = ceiling(month / 3),
    year_quarter = paste(year, quarter, sep = "-")
  )

core_inflation <- core_inflation %>%
  mutate(
    month = as.numeric(str_remove(period, "M")),
    quarter = ceiling(month / 3),
    year_quarter = paste(year, quarter, sep = "-")
  )

usda_expd <- usda_expd %>%
  mutate(year_quarter = paste(year, quarter, sep = "-"))

usda_fmli <- usda_fmli %>%
  mutate(year_quarter = paste(year, quarter, sep = "-"))

```

# CEX Data Cleaning

## Loading the data and very basic cleaning

```{r}
library(dplyr)
library(readr)
library(stringr)
library(stringr) # Make sure stringr is loaded
library(ggplot2)

# Set file path - update this to match your file location
file_path <- "C:/Users/omyue/OneDrive/Desktop/DATA 205/U.S. Bureau of Labor Statistics â€“ Consumer Expenditure Surveys (CE)/combined_interview_data.csv"

# Read the raw data - explicitly define column types to handle parsing issues
cex_raw <- read_csv(file_path,
                    col_types = cols(
                      # Specify the types of the columns.  This is VERY important.
                      QYEAR = col_character(),  #  Read QYEAR as character initially.
                      NEWID = col_double(),
                      SEQNO = col_double(),
                      ALCNO = col_double(),
                      REC_ORIG = col_double(),
                      JMKPURQV = col_character(), # These are the ones with "A", "B", etc.
                      JMKP_RQV = col_character(),
                      JNONFDQV = col_character(),
                      JNON_DQV = col_character(),
                      JOTHSTQV = col_character(),
                      JOTH_TQV = col_character(),
                      JDINEOQV = col_character(),
                      JDIN_OQV = col_character(),
                      JSCHMLQV = col_character(),
                      JSCH_LQV = col_character(),
                      JMKGRCQV = col_character(),
                      JMKG_CQV = col_character(),
                      year = col_double(),  # Assuming 'year' is already clean.
                      quarter = col_double(), # Assuming 'quarter' is already clean
                      INCLASS = col_double(), # Income Class - Use this instead
                      .default = col_character()  # Read the rest as character
                    ))

# Print the problems.
problems(cex_raw)
```

## Identifying which columns exist within the data

```{r}
# dentify which columns exist in your dataset
print(paste("Number of columns in dataset:", ncol(cex_raw)))
print(paste("Number of rows in dataset:", nrow(cex_raw)))
print("First few rows of raw data:")
head(cex_raw)
print("Summary of raw data:")
summary(cex_raw)

# Define the columns we want to convert to numeric (based on your sample data)
food_cols <- c(
  "JMKPURQV", # Total market purchases
  "JMKP_RQV", # Another market purchases variable
  "JNONFDQV", # Non-food purchases
  "JNON_DQV", # Another non-food variable
  "JOTHSTQV", # Other store purchases
  "JOTH_TQV", # Another other store variable
  "JDINEOQV", # Dining out
  "JDIN_OQV", # Another dining out variable
  "JSCHMLQV", # School meals
  "JSCH_LQV", # Another school meals variable
  "JMKGRCQV", # Market groceries
  "JMKG_CQV"  # Another market groceries variable
)

# Check which of these columns actually exist
existing_cols <- intersect(food_cols, names(cex_raw))
print("Columns found in the dataset:")
print(existing_cols)
```

## Cleaning variables

```{r}
# Clean the non-numeric placeholders and convert to numeric
cex_cleaned <- cex_raw %>%
  mutate(across(all_of(existing_cols),  #  Process only the food columns.
                 ~ ifelse(. %in% c(".", "A", "B", "C", "D", "E", "F", "G"), NA, .))) %>%
  mutate(across(all_of(existing_cols), ~ as.numeric(.)))   # Convert AFTER cleaning.

# Handle QYEAR to create year and quarter.  Make absolutely sure QYEAR is a character here.
cex_cleaned <- cex_cleaned %>%
  mutate(QYEAR = as.character(QYEAR)) %>% # Ensure QYEAR is treated as a character.
  mutate(
    year = ifelse(is.na(year), as.numeric(str_sub(QYEAR, 1, 4)), year), # Extract year.
    quarter = ifelse(is.na(quarter), as.numeric(str_sub(QYEAR, 5, 5)), quarter) # Extract quarter
  )

print("First few rows of cleaned data:")
head(cex_cleaned)
print("Summary of cleaned data:")
summary(cex_cleaned)
```

## Creating Food Spending Variables

```{r}
# Create clean food spending variables
# Based on your data, these appear to be the main food categories
cex_cleaned <- cex_cleaned %>%
  mutate(
    # Use the main variables where available
    GrocerySpend = if ("JMKGRCQV" %in% names(cex_cleaned)) JMKGRCQV else NA,
    DiningOutSpend = if ("JDINEOQV" %in% names(cex_cleaned)) JDINEOQV else NA,
    SchoolLunchSpend = if ("JSCHMLQV" %in% names(cex_cleaned)) JSCHMLQV else NA
  )

# Calculate total food spend (handling missing values properly)
cex_cleaned <- cex_cleaned %>%
  rowwise() %>%
  mutate(
    TotalFoodSpend = sum(c(GrocerySpend, DiningOutSpend, SchoolLunchSpend), na.rm = TRUE)
  ) %>%
  ungroup()
```

## Cleaning for spending by income and year

```{r}
# Check if INCLASS exists before proceeding
if ("INCLASS" %in% names(cex_cleaned)) {
  # Use INCLASS directly.  No need to create quantiles.
  # Define income categories based on INCLASS
  cex_cleaned <- cex_cleaned %>%
    mutate(income_group = case_when(
      INCLASS == 1 ~ "Under $5,000",
      INCLASS == 2 ~ "$5,000 to $9,999",
      INCLASS == 3 ~ "$10,000 to $14,999",
      INCLASS == 4 ~ "$15,000 to $19,999",
      INCLASS == 5 ~ "$20,000 to $29,999",
      INCLASS == 6 ~ "$30,000 to $39,999",
      INCLASS == 7 ~ "$40,000 to $49,999",
      INCLASS == 8 ~ "$50,000 to $69,999",
      INCLASS == 9 ~ "$70,000 and over",
      TRUE ~ NA_character_  # Handle missing INCLASS
    ))

  # Calculate average spending by income group *and* year, then arrange by year
  income_group_annual_spend <- cex_cleaned %>%
    group_by(year, income_group) %>%  # Group by year, then income group
    summarise(
      mean_grocery_spend = mean(GrocerySpend, na.rm = TRUE),
      mean_dining_spend = mean(DiningOutSpend, na.rm = TRUE),
      mean_school_lunch_spend = mean(SchoolLunchSpend, na.rm = TRUE),
      mean_total_food_spend = mean(TotalFoodSpend, na.rm = TRUE),
      n_households = n(),
      .groups = 'drop'
    ) %>%
    arrange(year, income_group) # Arrange by year, then income group

  # Print the income group and annual spending summary
  print("Average Spending by Income Group and Year:")
  print(income_group_annual_spend)

```

## Saves a CSV file for the cleaned data

```{r}

  # Save the income group and annual spending data
  write_csv(income_group_annual_spend, "C:/Users/omyue/OneDrive/Desktop/DATA 205/U.S. Bureau of Labor Statistics â€“ Consumer Expenditure Surveys (CE)/income_group_annual_food_spend.csv")

} else {
  print("INCLASS column not found. Income group analysis skipped.")
  income_group_spend <- NULL #create a null object
}

# Save annual averages for merging with inflation data
write_csv(
  annual_food_spend,
  "C:/Users/omyue/OneDrive/Desktop/DATA 205/U.S. Bureau of Labor Statistics â€“ Consumer Expenditure Surveys (CE)/annual_food_spend_clean.csv"
)

# Save the full cleaned dataset for other analyses (just in case!)
write_csv(
  cex_cleaned,
  "C:/Users/omyue/OneDrive/Desktop/DATA 205/U.S. Bureau of Labor Statistics â€“ Consumer Expenditure Surveys (CE)/cex_interview_cleaned.csv"
)

```


