---
title: "DATA 205 Yuengling Exploratory Data Analysis"
format: html
editor: visual
---

Exploratory Data Analysis

Core Inflation vs. Food Prices

{r}
library(highcharter)
library(dplyr)
library(ggplot2)
library(tidyr)
library(scales)
library(viridis)
library(readr)

# Setting up the General Theme for Visualizations

# Define the custom color palette
custom_palette <- c("#FFCDB2", "#FFB4A2", "#E5989B", "#B5838D", "#6D6875")

# Create a function to generate more colors if needed
extend_palette <- function(palette, n) {
  if (n <= length(palette)) {
    return(palette[1:n])
  } else {
    # Use colorRampPalette to extend the palette if needed
    colorRampPalette(palette)(n)
  }
}

# Creates a function that generates extra colors if more are needed (w/ assistance of Claude)
theme_food <- function() {
  theme_minimal() +
    theme(
      text            = element_text(family = "serif", color = "#6D6875"),
      plot.title      = element_text(family = "serif", size = 14, face = "bold", hjust = 0.5),
      plot.subtitle   = element_text(family = "serif", size = 11, color = "#B5838D"),
      plot.caption    = element_text(family = "serif", size = 9, color = "#B5838D"),
      axis.title      = element_text(family = "serif", size = 11, face = "bold"),
      axis.text       = element_text(family = "serif", size = 10),
      legend.title    = element_text(family = "serif", size = 9, face = "bold"),
      legend.text     = element_text(family = "serif", size = 7),
      legend.position = "bottom",
      panel.grid.minor  = element_blank(),
      panel.grid.major  = element_line(color = "#F8F0E8"),
      panel.background  = element_rect(fill = "#FFFFFF", color = NA),
      plot.background   = element_rect(fill = "#FFFFFF", color = NA)
    )
}



# Create a directory for saving plots if it doesn't exist
dir.create("food_expenditure_plots", showWarnings = FALSE)

{r}
# Calculate annual averages
df_summary <- food_prices %>%
  # Filter for desired years (2013-2023)
  filter(year >= 2013, year <= 2023) %>%
  # Group by year and calculate averages
  group_by(year) %>%
  summarize(
    avg_food_price = mean(value, na.rm = TRUE),
    core_inflation = mean(med_core_price_index, na.rm = TRUE)
  ) %>%
  ungroup()

# Create Highchart
highchart() %>%
  hc_chart(type = "line") %>%
  hc_title(text = "Food Prices vs Core Inflation (2013-2023)") %>%
  hc_xAxis(title = list(text = "Year"), categories = df_summary$year) %>%
  hc_yAxis(title = list(text = "Value")) %>%
  hc_add_series(name = "Avg Food Price", data = df_summary$avg_food_price) %>%
  hc_add_series(name = "Core Inflation", data = df_summary$core_inflation) %>%
  hc_tooltip(shared = TRUE, crosshairs = TRUE, valueDecimals = 2) %>%
  hc_legend(enabled = TRUE) %>%
  hc_exporting(enabled = TRUE) %>%
  hc_colors(c("#E5989B", "lightgray"))


This chart computes and overlays the annual average food price against core CPI from 2013–2023, letting us see at a glance whether food‐specific inflation is outpacing the broader basket.

Seasonal Analysis

Food prices often fluctuate with the seasons due to supply cycles, holidays, and demand shifts. This panel plot breaks down average prices by month across categories, helping to reveal recurring seasonal patterns that may inform consumers and policymakers.

{r}
# Clean data and visualize
food_prices %>%
  # Remove corrupted categories and irrelevant "Other"
  filter(!str_detect(food_category, "Jaflebla"),
         food_category != "Other") %>%
  # Convert period to numeric month
  mutate(month = as.numeric(str_remove(period, "M"))) %>%
  # Calculate monthly averages
  group_by(food_category, month) %>%
  summarise(avg_price = mean(value, na.rm = TRUE)) %>%
  # Create visualization
  ggplot(aes(x = month, y = avg_price)) +
  geom_line(color = "#E5989B", linewidth = 0.8) +
  geom_point(color = "#E5989B", size = 1.5) +
  facet_wrap(~food_category, scales = "free_y", ncol = 4) +
  scale_x_continuous(
    breaks = c(1, 4, 7, 10),
    labels = c("Jan", "Apr", "Jul", "Oct")
  ) +
  labs(
    title = "Seasonal Price Patterns by Category (2013–2023)",
    subtitle = "Monthly averages in USD",
    x = NULL,
    y = "Average Price"
  ) +
  theme_minimal() +
  theme(
    text = element_text(family = "serif"),
    axis.text = element_text(size = 8),
    strip.text = element_text(size = 8, face = "bold"),
    panel.grid.minor = element_blank(),
    plot.title = element_text(size = 14, margin = margin(b = 10)),
    plot.subtitle = element_text(size = 10, color = "gray40")
  ) +
  scale_y_continuous(labels = scales::dollar_format())


Here we convert the “M01…M12” period codes into numeric months, then compute monthly average prices for each food category. The faceted line chart that follows exposes clear seasonal peaks and troughs—insight that could guide everything from inventory planning to policy timing (such as when to boost food assistance).

Lagged Inflation Effects

First, we pull out the top 25% of years by core inflation. Then, for those shock years, we measure how much each food category’s price diverged from the baseline CPI. This bar chart highlights which categories (like meat or dairy) are most sensitive when inflation spikes, suggesting where consumers feel the pinch first.

{r}
# Top 25% inflation years
high_inf_years <- food_prices %>%
  group_by(year) %>%
  summarise(core=mean(med_core_price_index)) %>%
  filter(core>=quantile(core,0.75)) %>%
  pull(year)

food_prices %>%
  filter(year %in% high_inf_years) %>%
  group_by(food_category) %>%
  summarise(dev=mean(value - med_core_price_index)) %>%
  ggplot(aes(reorder(food_category,dev),dev)) +
    geom_col(fill="#E5989B") +
    coord_flip() +
    labs(title="Deviation from Core Inflation\nin High‑Inflation Years",
         x=NULL, y="Price – Core CPI") +
    theme_food()

Price Range by Food Category

By grouping over the entire 2013–2023 window, this code finds each category’s minimum, maximum, and average price. The linerange plus point plot neatly summarizes volatility (span) alongside central tendency, so you can spot which items are consistently stable (e.g. pantry staples) versus wildly variable (e.g. beef).

{r}
food_range <- food_prices %>%
  group_by(food_category) %>%
  summarise(
    min_price = min(value, na.rm = TRUE),
    max_price = max(value, na.rm = TRUE),
    avg_price = mean(value, na.rm = TRUE)
  )

ggplot(food_range, aes(x = reorder(food_category, avg_price))) +
  geom_linerange(aes(ymin = min_price, ymax = max_price), color = "#E5989B", size = 2) +
  geom_point(aes(y = avg_price), color = "#B5838D", size = 3) +
  coord_flip() +
  labs(title = "Price Range by Food Category (Min–Max with Avg)",
       x = "Food Category",
       y = "Price ($)") +
  theme_minimal()


Through this visualization, we can see that beef and beverage products have the widest range for food prices (longer line = wider price range). Some of the foods that have the smallest ranges are pantry staples and seafood (shorter line = smaller price range).

Consumer Expenditure Survey EDA

Now we will move on to exploring some of the data from the CES datasets by creating some visualizations. Let's start off by loading up the dataset into our environment.

Distribution of Food Expenditure by Class

Now we're going to go and rename the summary_data (from the beginning of this markdown) to expenditure_data for more detailed naming.

{r}
# Create a consistent name for the dataset throughout the script
expenditure_data <- summary_data

Additional Cleaning for Visualization Purposes

These few lines drop any “Unknown” income groups, enforce a 2017 Q3 cutoff for completeness (the income recording data stops after that point), and filter to only those years where every income bracket appears. That way, our income‑group comparisons remain apples‑to‑apples—no misleading dips from missing data.

{r}

# Remove NA income group
expenditure_data <- expenditure_data %>%
  filter(!is.na(IncomeGroup) & IncomeGroup != "Unknown")

# Handle the 2017 Q3 cutoff - filter to include only data up to 2017 Q3
# Assuming your data has year as numeric. If it includes quarters, modify accordingly
expenditure_data <- expenditure_data %>%
  filter(year <= 2017.75) # Adjust this cutoff as needed for your data format

# Find years with complete data for all income groups
complete_years <- expenditure_data %>%
  group_by(year) %>%
  summarise(n_groups = n_distinct(IncomeGroup)) %>%
  filter(n_groups == max(n_groups)) %>%
  pull(year)

# Filter to include only complete years
expenditure_data <- expenditure_data %>%
  filter(year %in% complete_years)

# Ensure IncomeGroup is ordered properly for plotting
expenditure_data <- expenditure_data %>%
  mutate(IncomeGroup = factor(IncomeGroup,
                              levels = c("Less than $5,000", "$5,000 to $9,999",
                                         "$10,000 to $14,999", "$15,000 to $19,999",
                                         "$20,000 to $29,999", "$30,000 to $39,999",
                                         "$40,000 to $49,999", "$50,000 to $69,999",
                                         "$70,000 and over")))

Here we compute the ratio of dining‑out spend to grocery spend by income group and year. The resulting trend lines show how dining out has grown (or shrunk) relative to groceries, a proxy for changing consumer behavior and discretionary spending power.

We reshape our expenditure data into “long” format so that groceries, dining out, and school meals stack in a single bar per group. Faceting by year then gives a quick visual of how spending mixes shift over time, like whether families are allocating more to groceries versus eating out.

{r}
# Spending composition by year

# Reshape the data for stacked bar charts
spending_data <- expenditure_data %>%
  select(year, IncomeGroup, MeanGrocerySpend, MeanDiningOutSpend, MeanSchoolLunchSpend) %>%
  pivot_longer(
    cols = c(MeanGrocerySpend, MeanDiningOutSpend, MeanSchoolLunchSpend),
    names_to = "SpendCategory",
    values_to = "Amount"
  ) %>%
  mutate(SpendCategory = case_when(
    SpendCategory == "MeanGrocerySpend" ~ "Groceries",
    SpendCategory == "MeanDiningOutSpend" ~ "Dining Out",
    SpendCategory == "MeanSchoolLunchSpend" ~ "School Meals"
  ))

# Define category colors using our palette
category_colors <- c("Groceries" = "#E5989B", 
                    "Dining Out" = "#FFCDB2", 
                    "School Meals" = "#6D6875")

# Get unique years from the filtered data
years <- sort(unique(expenditure_data$year))

# Create a stacked bar chart for each year
spending_composition_plots <- list()

for (yr in years) {
  # Filter data for the current year
  year_data <- spending_data %>% filter(year == yr)
  
  # Create the stacked bar chart for this year
  plot <- ggplot(year_data,
                 aes(x = IncomeGroup,
                     y = Amount, fill = SpendCategory)) +
    geom_bar(stat = "identity", position = "stack", width = 0.7) +
    scale_y_continuous(labels = dollar_format()) +
    scale_fill_manual(values = category_colors) +
    coord_flip() +
    labs(
      title = paste("Food Expenditure Composition (", yr, ")", sep = ""),
      subtitle = "Breakdown of average spending on groceries, dining out, and school meals",
      x = NULL,
      y = "Average Annual Expenditure",
      fill = "Spending Category"
    ) +
    theme_food()
  
  # Display the plot
  print(plot)
  
  # Save the plot
  ggsave(paste0("food_expenditure_plots/food_spending_composition_", yr, ".png"), plot,
          width = 10, height = 6, dpi = 300)
  
  # Store the plot for later use in the dashboard
  spending_composition_plots[[as.character(yr)]] <- plot
}

# Also create a combined faceted plot of all years
spending_composition_faceted <- ggplot(spending_data,
                           aes(x = IncomeGroup,
                               y = Amount, fill = SpendCategory)) +
  geom_bar(stat = "identity", position = "stack", width = 0.7) +
  scale_y_continuous(labels = dollar_format()) +
  scale_fill_manual(values = category_colors) +
  coord_flip() +
  facet_wrap(~ year, ncol = 2) +
  labs(
    title = "Food Expenditure Composition Across Years",
    subtitle = "Breakdown of spending by category for each income group",
    x = NULL,
    y = "Average Annual Expenditure",
    fill = "Spending Category"
  ) +
  theme_food() +
  theme(
    strip.background = element_rect(fill = "#F8F0E8"),
    strip.text = element_text(face = "bold", size = 10, color = "#6D6875"),
    axis.text.y = element_text(size = 5)
  )

# Display the faceted plot
spending_composition_faceted

Yearly Income Expenditure Comparisons

This faceted line chart plots each income bracket’s average annual food spending from 2013 through 2017‑Q3 on its own small panel, with a shared time axis but independent vertical scales. By laying out every cohort side‑by‑side, you can immediately spot which groups saw the steepest upward trajectory (e.g. lower‑income households) versus those with flatter spending patterns. The free‑scale y‑axes ensure that even smaller groups’ trends remain visible, while the plasma color gradient highlights each line distinctly without a distracting legend.

{r}
# Determine number of colors needed
n_income_groups <- length(unique(expenditure_data$IncomeGroup))
palette_colors <- extend_palette(custom_palette, n_income_groups)

yearly_comparison <- ggplot(expenditure_data,
                           aes(x = year, y = MeanTotalFoodSpend, 
                               color = IncomeGroup, group = IncomeGroup)) +
  geom_line(size = 1.2, alpha = 0.8) +
  geom_point(size = 2.5) +
  scale_y_continuous(labels = dollar_format()) +
  scale_color_manual(values = palette_colors) +    # ← use custom palette here
  facet_wrap(~ IncomeGroup, scales = "free_y", ncol = 3) +
  labs(
    title = "Food Expenditure Trends by Income Group",
    subtitle = "Individual trend lines for each income group",
    x = "Year",
    y = "Mean Total Food Expenditure",
    color = "Income Group"
  ) +
  theme_food() +
  theme(
    legend.position = "none",
    strip.background = element_rect(fill = "#f5f5f5"),
    strip.text = element_text(face = "bold")
  )

yearly_comparison


This graph exhibits the trends in mean total food expenditure from 2013 to 2017 across different income groups. Generally, food spending increased for most income groups during this period, especially for those earning under $40,000 annually, who show a steady upward trend.

Interestingly, the highest income group ($70,000 and over) exhibited a sharp drop in 2015, followed by a plateau, suggesting possible changes in spending habits, budgeting behavior, or data anomalies for that group. Overall, the graph indicates that lower-income households consistently increased their food spending over time, possibly due to inflation or shifts in food affordability, while higher-income households may have optimized or reduced their food expenses despite their greater means.

Takeaways from EDA

From 2013 to 2020, food prices climbed faster than overall inflation, but they were at their peak during the extreme inflation spikes in 2021–23. When we line up average food‑price changes against the core CPI (which takes out food and energy for its calculation), you can see food prices skyrocketing. And digging deeper, meats like beef and beverages jumped way above the baseline while staples like grains were rather stable. Essentially, when inflation kicked in, the cost of your steak shot up, but your loaf of bread or can of green beans stayed mostly steady.

Then we looked at who’s paying the tab. Low‑income households saw the biggest year‑to‑year jumps in their grocery bills, while wealthier families actually dialed back spending after 2015. We also saw that fruits and veggies swing wildly with the seasons but pantry staples hold their ground. All together, it paints a picture of folks on tight budgets getting squeezed hardest—cutting back on pricey proteins and leaning more on cheap staples. That’s exactly the story our next analyses will unpack in numbers and models.
